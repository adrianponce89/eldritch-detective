import inquirer from "inquirer";
import OpenAI from "openai";
import dotenv from "dotenv";
import "colors";

dotenv.config();

type ChatCompletionMessageParam = OpenAI.Chat.Completions.ChatCompletionMessageParam;

const openai: OpenAI = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

type PlayerData = {
  name: string;
  profesion: string;
};

const playerData: PlayerData = {
  name: "",
  profesion: "",
};

const readInput = async (message: string) => {
  const question = [
    {
      type: "input",
      name: "description",
      message,
      validate: (value: string) => {
        if (value.length) {
          return true;
        } else {
          return "This field is required";
        }
      },
    },
  ];
  const { description } = await inquirer.prompt(question);
  return description;
};

const main = async () => {
  playerData.name = await readInput("What is your name?");
  playerData.profesion = await readInput("What is your profesion?");

  let systemMsg: ChatCompletionMessageParam;
  let previousMsgs: ChatCompletionMessageParam[] = [];
  let userMsg: ChatCompletionMessageParam;

  systemMsg = {
    role: "system",
    content: `
    You are a dungeon master. You will guide ${playerData.name} through a series of challenges and adventures.
    You will have to make decisions that will affect the outcome of the story.
    You will describe the environment and the characters that ${playerData.name} will encounter.
    The story will be generated by OpenAI's GPT-4o model.
    The story must be related to eldritch horrors and cosmic entities. As on the Cthulhu Mythos.
    You will have access to a set of functions that will help you interact with the player inventory.
    You will be short and concise with your descriptions.
    -----------------------------------------------------
    Player name: ${playerData.name}
    Player profesion: ${playerData.profesion}
    `,
  };

  console.log(`Escribe "Comenzar Aventura" para comenzar la historia.`);
  while (true) {
    let userInput: string = "";
    userInput = await readInput(">");

    userMsg = { role: "user", content: userInput };

    const currentMsgs: ChatCompletionMessageParam[] = [systemMsg, ...previousMsgs.slice(-8), userMsg];

    const stream = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: currentMsgs,
      stream: true,
    });

    let completeMessage = "";
    const assistantMessage: ChatCompletionMessageParam = {
      role: "assistant",
      content: completeMessage,
    };

    for await (const chunk of stream) {
      const content = chunk.choices[0]?.delta?.content || "";
      completeMessage += content;
      process.stdout.write(content);
    }

    previousMsgs.push(userMsg);
    previousMsgs.push(assistantMessage);
  }
};

main();
